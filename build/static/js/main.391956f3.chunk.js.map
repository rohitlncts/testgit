{"version":3,"sources":["MyTable.js","MainPage.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["MyTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tableData","nextProps","setState","react_default","a","createElement","Table","celled","Body","Row","Cell","color","textAlign","width","Header","style","height","overflow","striped","selectable","keys","length","map","data","index","number","href","html_url","target","rel","title","created_at","updated_at","colSpan","Component","MainPage","response","data24hrs","data7days","databeyond7days","errorMessage","isDataFound","selectedLabel","applysearch","URL","document","getElementById","value","message","indexOf","replace","charAt","substring","fetch","Method","then","json","catch","now","Date","getTime","db7","d7","d24","key","hasOwnProperty","val","d","push","onClickLabel","e","id","as","paddingTop","Container","Form","size","Input","fluid","placeholder","label","Button","type","onClick","primary","labelPosition","Label","centered","Grid","columns","container","Column","circular","Segment","src_MyTable","Footer","className","App","src_MainPage","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.391956f3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Header, Table } from \"semantic-ui-react\";\r\n\r\n/**\r\n * Table Component to populate table content\r\n */\r\nclass MyTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tableData: []\r\n    };\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({\r\n      tableData: nextProps.tableData\r\n    });\r\n  }\r\n  render() {\r\n    let tableData = this.state.tableData;\r\n    return (\r\n      <div>\r\n        <Table celled={false}>\r\n          <Table.Body>\r\n            <Table.Row>\r\n              <Table.Cell>\r\n                <Table color=\"blue\">\r\n                  <Table.Body>\r\n                    <Table.Row textAlign=\"center\">\r\n                      <Table.Cell width={1}>\r\n                        <Header>S.No.</Header>\r\n                      </Table.Cell>\r\n                      <Table.Cell width={1}>\r\n                        <Header>IssueID</Header>\r\n                      </Table.Cell>\r\n                      <Table.Cell width={5}>\r\n                        <Header> Issue Title</Header>\r\n                      </Table.Cell>\r\n                      <Table.Cell width={3}>\r\n                        <Header> Created</Header>\r\n                      </Table.Cell>\r\n                      <Table.Cell width={3}>\r\n                        <Header> Last Updated</Header>\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                  </Table.Body>\r\n                </Table>\r\n              </Table.Cell>\r\n            </Table.Row>\r\n            <Table.Row>\r\n              <Table.Cell>\r\n                <div style={{ height: \"280px\", overflow: \"auto\" }}>\r\n                  <Table striped selectable>\r\n                    <Table.Body>\r\n                      {tableData && Object.keys(tableData).length > 0 ? (\r\n                        tableData.map((data, index) => (\r\n                          <Table.Row textAlign=\"center\">\r\n                            <Table.Cell width={1}>{index + 1}</Table.Cell>\r\n                            <Table.Cell width={1}>{data.number}</Table.Cell>\r\n                            <Table.Cell width={5}>\r\n                              <a\r\n                                href={data.html_url}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\"\r\n                              >\r\n                                {data.title}\r\n                              </a>\r\n                            </Table.Cell>\r\n                            <Table.Cell width={3}>{data.created_at}</Table.Cell>\r\n                            <Table.Cell width={3}>{data.updated_at}</Table.Cell>\r\n                          </Table.Row>\r\n                        ))\r\n                      ) : (\r\n                        <Table.Cell textAlign=\"center\" colSpan=\"10\">\r\n                          No Record Found\r\n                        </Table.Cell>\r\n                      )}\r\n                    </Table.Body>\r\n                  </Table>\r\n                </div>\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          </Table.Body>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyTable;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Grid,\r\n  Segment,\r\n  Label,\r\n  Button,\r\n  Input,\r\n  Container,\r\n  Header,\r\n  Form\r\n} from \"semantic-ui-react\";\r\nimport MyTable from \"./MyTable\";\r\n\r\n/**\r\n * Main page\r\n */\r\nclass MainPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      response: [],\r\n      data24hrs: [],\r\n      data7days: [],\r\n      databeyond7days: [],\r\n      errorMessage: \"\",\r\n      isDataFound: false,\r\n      tableData: [],\r\n      selectedLabel: \"\"\r\n    };\r\n    /**\r\n     * Method to fetch json data from gethub repository\r\n     */\r\n    this.applysearch = () => {\r\n      this.setState({\r\n        isDataFound: false\r\n      });\r\n      let URL = document.getElementById(\"repo-url\").value;\r\n      let message = \"\";\r\n      if (URL) {\r\n        if (URL.indexOf(\"https://github.com/\") === 0) {\r\n          URL = URL.replace(\r\n            \"https://github.com/\",\r\n            \"https://api.github.com/repos/\"\r\n          );\r\n          if (URL.charAt(URL.length - 1) === \"/\") {\r\n            URL = URL.substring(0, URL.length - 1);\r\n            document.getElementById(\"repo-url\").value = URL;\r\n          }\r\n          URL = URL + \"/issues\";\r\n        } else {\r\n          this.setState({\r\n            errorMessage: \"Incorrect URL \"\r\n          });\r\n          return;\r\n        }\r\n\r\n        fetch(URL, {\r\n          Method: \"GET\"\r\n        })\r\n          .then(data => {\r\n            return data.json();\r\n          })\r\n          .catch(function() {\r\n            message = \"Incorrect URL or response XML\";\r\n          })\r\n          .then(response => {\r\n            let now = new Date().getTime();\r\n            const oneDay = 1000 * 60 * 60 * 24;\r\n            const sevenDay = 1000 * 60 * 60 * 24 * 7;\r\n            let db7 = [];\r\n            let d7 = [];\r\n            let d24 = [];\r\n            for (var key in response) {\r\n              if (response.hasOwnProperty(key)) {\r\n                var val = response[key];\r\n                let d = new Date(val.created_at);\r\n                if (val.state === \"open\") {\r\n                  if (now - d.getTime() > sevenDay) {\r\n                    db7.push(val);\r\n                  } else if (now - d.getTime() > oneDay) {\r\n                    d7.push(val);\r\n                  } else {\r\n                    d24.push(val);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            this.setState({\r\n              isDataFound: true,\r\n              response,\r\n              databeyond7days: db7,\r\n              data7days: d7,\r\n              data24hrs: d24,\r\n              errorMessage: message,\r\n              tableData: []\r\n            });\r\n          });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * JS Method for label click action, will populate table data\r\n     */\r\n    this.onClickLabel = (e, data) => {\r\n      let tableData = [];\r\n      let selectedLabel = \"\";\r\n      switch (data.id) {\r\n        case \"total\":\r\n          tableData = this.state.response;\r\n          selectedLabel = \"Total Open Issues\";\r\n          break;\r\n        case \"b7d\":\r\n          tableData = this.state.databeyond7days;\r\n          selectedLabel = \"Open Issues Beyond 7 Days\";\r\n          break;\r\n        case \"d7\":\r\n          tableData = this.state.data7days;\r\n          selectedLabel = \"Open Issues In Last 7 Days\";\r\n          break;\r\n        case \"d24\":\r\n          tableData = this.state.data24hrs;\r\n          selectedLabel = \"Open Issues In Last 24 Hrs\";\r\n          break;\r\n        default:\r\n          tableData = [];\r\n          selectedLabel = \"\";\r\n      }\r\n      this.setState({\r\n        tableData,\r\n        selectedLabel\r\n      });\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header as=\"h1\" textAlign=\"center\" style={{ paddingTop: \"10px\" }}>\r\n          Github Open Issue Dashboard\r\n        </Header>\r\n        <Header as=\"h5\" textAlign=\"center\">\r\n          Please enter your github repository URL and click on submit button\r\n        </Header>\r\n        <Container>\r\n          <Form size=\"tiny\">\r\n            <Input\r\n              fluid\r\n              id=\"repo-url\"\r\n              placeholder=\"Repository URL\"\r\n              label={\r\n                <Button type=\"submit\" onClick={this.applysearch} primary>\r\n                  Submit\r\n                </Button>\r\n              }\r\n              labelPosition=\"right\"\r\n            />\r\n            {this.state.errorMessage && (\r\n              <Label>{this.state.errorMessage}</Label>\r\n            )}\r\n          </Form>\r\n        </Container>\r\n        {this.state.isDataFound && (\r\n          <Container centered>\r\n            <Grid\r\n              fluid\r\n              columns={4}\r\n              centered\r\n              textAlign=\"center\"\r\n              style={{ paddingTop: \"20px\" }}\r\n            >\r\n              <Grid.Row container centered>\r\n                <Grid.Column textAlign=\"center\">Total Issues</Grid.Column>\r\n                <Grid.Column textAlign=\"center\">Beyond Last 7 Days</Grid.Column>\r\n                <Grid.Column textAlign=\"center\">In Last 7 Days</Grid.Column>\r\n                <Grid.Column textAlign=\"center\">In Last 24 hrs</Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row centered>\r\n                <Grid.Column centered textAlign=\"center\">\r\n                  <Label\r\n                    id=\"total\"\r\n                    circular\r\n                    size=\"massive\"\r\n                    color=\"blue\"\r\n                    as=\"a\"\r\n                    onClick={this.onClickLabel}\r\n                  >\r\n                    {this.state.response.length}\r\n                  </Label>\r\n                </Grid.Column>\r\n                <Grid.Column centered textAlign=\"center\">\r\n                  <Label\r\n                    id=\"b7d\"\r\n                    circular\r\n                    size=\"massive\"\r\n                    color=\"red\"\r\n                    as=\"a\"\r\n                    onClick={this.onClickLabel}\r\n                  >\r\n                    {this.state.databeyond7days.length}\r\n                  </Label>\r\n                </Grid.Column>\r\n                <Grid.Column centered textAlign=\"center\">\r\n                  <Label\r\n                    id=\"d7\"\r\n                    circular\r\n                    size=\"massive\"\r\n                    color=\"orange\"\r\n                    as=\"a\"\r\n                    onClick={this.onClickLabel}\r\n                  >\r\n                    {this.state.data7days.length}\r\n                  </Label>\r\n                </Grid.Column>\r\n                <Grid.Column centered textAlign=\"center\">\r\n                  <Label\r\n                    id=\"d24\"\r\n                    circular\r\n                    size=\"massive\"\r\n                    color=\"yellow\"\r\n                    as=\"a\"\r\n                    onClick={this.onClickLabel}\r\n                  >\r\n                    {this.state.data24hrs.length}\r\n                  </Label>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n            <Segment>\r\n              <Header textAlign=\"center\">{this.state.selectedLabel}</Header>\r\n              <MyTable tableData={this.state.tableData} />\r\n            </Segment>\r\n          </Container>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Component } from \"react\";\r\n/**\r\n * Footer\r\n */\r\nclass Footer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"ui vertical footer segment\">\r\n        <div className=\"ui center aligned container\">\r\n          <h5 className=\"ui  header\">\r\n            &copy; Copyright 2019 | All rights reserved | Rohit Raj\r\n            <a\r\n              href=\"https://www.facebook.com/qzelt\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <i className=\"facebook square icon big\" />\r\n            </a>\r\n          </h5>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\n\nimport MainPage from \"./MainPage\";\nimport Footer from \"./Footer\";\n/**\n * App - includes main component and footer component\n */\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <MainPage />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\n/**\n * Index.js -- Main js file from where rendering starts\n */\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}